// <auto-generated />
using System;
using ABE.LTRIC.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABE.LTRIC.Infrastructure.Migrations
{
    [DbContext(typeof(LTRIC_Context))]
    partial class LTRIC_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.Doc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DocNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsODEnded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ODDueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrincipleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Docs");
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.DocDtl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DocId")
                        .HasColumnType("int");

                    b.Property<decimal>("EarlySattleToBank")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LTR_Intrest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LTR_Period")
                        .HasColumnType("int");

                    b.Property<decimal>("LTR_Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OD_Interest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OD_Period")
                        .HasColumnType("int");

                    b.Property<decimal>("OD_Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalChargeToBank")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalChargeToCompany")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total_Intrest")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.ToTable("DocDtls");
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.Doc", b =>
                {
                    b.HasOne("ABE.LTRIC.Infrastructure.Entities.Company", null)
                        .WithMany("Docs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.DocDtl", b =>
                {
                    b.HasOne("ABE.LTRIC.Infrastructure.Entities.Doc", null)
                        .WithMany("DocDtls")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.Company", b =>
                {
                    b.Navigation("Docs");
                });

            modelBuilder.Entity("ABE.LTRIC.Infrastructure.Entities.Doc", b =>
                {
                    b.Navigation("DocDtls");
                });
#pragma warning restore 612, 618
        }
    }
}
